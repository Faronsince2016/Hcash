// This file is generated by hsrcore_json_to_cpp from ${json_file_name}
#ifndef HSR_TEST_NETWORK
#include <blockchain/GenesisJson.hpp>
#include <blockchain/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace hsrcore { namespace blockchain {
static const unsigned char raw_genesis_config0[] =
{
  0xbb, 0x14, 0xe6, 0x59, 0x00, 0x09, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x03, 
  0x72, 0x6c, 0xdc, 0x76, 0x5b, 0x8e, 0x9b, 0xfe, 0x9a, 0xe5, 0xcb, 0x23, 0x19, 
  0x28, 0xf5, 0x6d, 0x18, 0x45, 0x15, 0x66, 0x7c, 0xf7, 0xa3, 0x33, 0x4f, 0x22, 
  0x8d, 0x55, 0x64, 0x19, 0x2d, 0x35, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x03, 
  0xcb, 0x92, 0xae, 0x1c, 0x81, 0xfd, 0x17, 0xa0, 0xaa, 0x01, 0xf1, 0x14, 0xb8, 
  0xa6, 0x60, 0xca, 0xf5, 0x8a, 0xc7, 0x49, 0x2a, 0xc5, 0x8d, 0x0a, 0xe5, 0xf0, 
  0x9f, 0x9d, 0x77, 0x8c, 0xe0, 0x86, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x02, 
  0xa1, 0x23, 0x9b, 0x7c, 0x12, 0x1b, 0x0f, 0xea, 0x8c, 0x87, 0x5f, 0xc3, 0xfb, 
  0x79, 0xc0, 0xb5, 0x69, 0x8e, 0xaa, 0x91, 0xe7, 0x16, 0x87, 0x32, 0xed, 0x05, 
  0x13, 0x52, 0x85, 0xa5, 0xcb, 0x38, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x03, 
  0xef, 0x95, 0x7a, 0x50, 0x94, 0xce, 0xe3, 0x61, 0xdc, 0xfd, 0xa0, 0x47, 0x45, 
  0x9a, 0xef, 0xd6, 0xd5, 0xdb, 0x51, 0x16, 0xda, 0x3e, 0xfb, 0xaa, 0xef, 0x48, 
  0xdb, 0x6c, 0x3c, 0xa5, 0x1b, 0x0d, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x02, 
  0xd1, 0xc3, 0x03, 0x56, 0xdd, 0x92, 0xcd, 0x0f, 0x15, 0xbf, 0x0b, 0xe6, 0xeb, 
  0xf1, 0xbe, 0x1e, 0x6c, 0x19, 0xa1, 0xfb, 0x24, 0x07, 0x48, 0xd4, 0x48, 0xbd, 
  0x70, 0x3a, 0x0f, 0x05, 0x5a, 0xa4, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x02, 
  0xbf, 0x9d, 0xab, 0x4b, 0xb5, 0x76, 0x4f, 0x14, 0x3f, 0x7a, 0x58, 0xa9, 0x39, 
  0x70, 0x1a, 0x94, 0x0b, 0x70, 0x3f, 0x96, 0xd1, 0x83, 0x5e, 0x45, 0xf7, 0x2f, 
  0xb4, 0x1c, 0x36, 0x15, 0xb5, 0xff, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x02, 
  0xa6, 0x11, 0xbe, 0xe2, 0x64, 0xb9, 0xaf, 0x45, 0x78, 0x7e, 0x23, 0xd0, 0x4b, 
  0xba, 0x18, 0x50, 0xd9, 0xac, 0x1a, 0xce, 0xa1, 0x30, 0x0d, 0xdd, 0x38, 0xb7, 
  0xdd, 0x2a, 0x05, 0x6e, 0x2e, 0x47, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03, 
  0x66, 0xd5, 0xc3, 0xf5, 0xe9, 0xb4, 0xa9, 0xee, 0x5b, 0x22, 0xae, 0x92, 0xb1, 
  0x99, 0xe1, 0xd5, 0x01, 0x47, 0x87, 0x66, 0x79, 0x26, 0xf0, 0x01, 0xb5, 0x1e, 
  0x56, 0x7a, 0x60, 0xcd, 0xec, 0x8f, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x02, 
  0xa4, 0x62, 0x96, 0xd5, 0x58, 0x6c, 0x7a, 0x43, 0x10, 0x5d, 0x1f, 0xa0, 0x7e, 
  0x7e, 0x05, 0x65, 0x19, 0x42, 0x02, 0x3d, 0x91, 0x76, 0x65, 0xcf, 0x9a, 0x4a, 
  0x74, 0x2b, 0x56, 0x84, 0x27, 0x59, 0x01, 0x22, 0x48, 0x4e, 0x39, 0x6d, 0x54, 
  0x79, 0x76, 0x54, 0x55, 0x41, 0x4c, 0x75, 0x72, 0x31, 0x42, 0x4c, 0x39, 0x5a, 
  0x38, 0x56, 0x35, 0x76, 0x4d, 0x4d, 0x4b, 0x48, 0x72, 0x46, 0x37, 0x61, 0x50, 
  0x35, 0x50, 0x69, 0x00, 0x80, 0x7a, 0x91, 0x18, 0x78, 0xad, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}

} } // end namespace hsrcore::blockchain
#endif
