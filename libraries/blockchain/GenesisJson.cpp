// This file is generated by hsrcore_json_to_cpp from ${json_file_name}
#ifndef HSR_TEST_NETWORK
#include <blockchain/GenesisJson.hpp>
#include <blockchain/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace hsrcore { namespace blockchain {
static const unsigned char raw_genesis_config0[] =
{
  0x24, 0x6a, 0x78, 0x59, 0x00, 0x09, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x02, 
  0x61, 0xe7, 0xae, 0x67, 0xe8, 0x57, 0xe1, 0xca, 0xce, 0xfa, 0x71, 0xcd, 0xb0, 
  0x7e, 0xda, 0xb3, 0x7f, 0xa0, 0x4a, 0x2c, 0x99, 0x71, 0x8a, 0x5e, 0x89, 0x44, 
  0x78, 0x83, 0xf3, 0xcd, 0x8f, 0xe7, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x03, 
  0x63, 0xb5, 0xc5, 0x3c, 0x74, 0xf6, 0x6a, 0x85, 0xd2, 0x31, 0x64, 0x4a, 0x38, 
  0x09, 0x24, 0xf0, 0x4e, 0x58, 0x32, 0x6e, 0x98, 0xeb, 0xa6, 0x2d, 0x8a, 0xb0, 
  0xe3, 0xac, 0x87, 0xf0, 0x07, 0xe9, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x03, 
  0x62, 0x63, 0x1e, 0x89, 0x20, 0xcd, 0x84, 0x66, 0x70, 0xa9, 0xcf, 0x0f, 0x85, 
  0x94, 0x55, 0x0a, 0xdf, 0xaf, 0xc7, 0xe5, 0x02, 0x18, 0xc1, 0xdb, 0x61, 0x2d, 
  0xe5, 0x78, 0xce, 0xbb, 0x36, 0x6b, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x03, 
  0x68, 0xb9, 0xfc, 0x2b, 0x82, 0xc2, 0x07, 0x33, 0xb1, 0xdd, 0x17, 0x5c, 0x4e, 
  0x23, 0x0c, 0xe4, 0xcd, 0x1c, 0x70, 0x90, 0x67, 0x53, 0x79, 0xa4, 0xed, 0xc5, 
  0x89, 0xfd, 0xef, 0xa1, 0xba, 0xe8, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x03, 
  0x27, 0x4a, 0x1c, 0xaf, 0x7a, 0x18, 0x04, 0x56, 0x17, 0xf9, 0xcd, 0x10, 0xa6, 
  0x3f, 0xbd, 0x0b, 0x5d, 0xfd, 0x7d, 0x4d, 0x23, 0x13, 0x5d, 0x3c, 0xee, 0xba, 
  0xcf, 0xc2, 0x78, 0x48, 0xfc, 0x6e, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x02, 
  0xd3, 0xe0, 0xcf, 0x82, 0xc2, 0xc1, 0x8b, 0xc6, 0x4b, 0xb3, 0x59, 0x81, 0xc1, 
  0x19, 0x04, 0x3a, 0x82, 0x3c, 0x29, 0x94, 0x63, 0xf6, 0xe2, 0x3a, 0xae, 0x80, 
  0x3b, 0xc8, 0x8e, 0x58, 0xd6, 0x13, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x02, 
  0xeb, 0x21, 0x9c, 0x82, 0xb4, 0x1c, 0xc9, 0xff, 0xfa, 0x96, 0x80, 0x3f, 0x16, 
  0x7e, 0xbe, 0x42, 0xcb, 0x84, 0x62, 0x4e, 0xcd, 0x22, 0x74, 0x9d, 0xb9, 0x50, 
  0xfb, 0x1f, 0x9b, 0xeb, 0x44, 0x74, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03, 
  0x10, 0xa7, 0x77, 0xff, 0x6f, 0x7d, 0xce, 0x16, 0x85, 0x35, 0xa9, 0x1c, 0x70, 
  0x17, 0x9a, 0xe8, 0x09, 0xb0, 0x12, 0x90, 0x3a, 0x6b, 0x80, 0xf7, 0xef, 0x50, 
  0x1c, 0x38, 0x2a, 0x91, 0x8f, 0xc1, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x03, 
  0x1d, 0x26, 0xd3, 0x68, 0x92, 0x40, 0x63, 0x04, 0x4b, 0xec, 0x2d, 0x05, 0x83, 
  0x4b, 0x98, 0x41, 0xc6, 0xc3, 0xce, 0x6f, 0x55, 0x0d, 0xa3, 0x5b, 0x97, 0x82, 
  0xce, 0x05, 0x6d, 0x90, 0x2b, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}

} } // end namespace hsrcore::blockchain
#endif