// This file is generated by hsrcore_json_to_cpp from ${json_file_name}

#include <blockchain/GenesisJson.hpp>
#include <blockchain/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace hsrcore { namespace blockchain {
	static const unsigned char raw_genesis_config0[] =
	{
		0x24, 0x6a, 0x78, 0x59, 0x00, 0x09, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x02,
		0xc8, 0xfa, 0x06, 0xcf, 0x4a, 0xfc, 0x02, 0x82, 0x3d, 0xee, 0x4e, 0xd2, 0xee,
		0x59, 0x01, 0x9d, 0x0b, 0x60, 0x32, 0x1d, 0x63, 0xab, 0xe8, 0xd6, 0x56, 0x50,
		0x4a, 0xe5, 0x1a, 0x5a, 0x87, 0xeb, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x03,
		0x04, 0xb3, 0xab, 0xc3, 0xe4, 0x0c, 0x33, 0x38, 0x9c, 0x25, 0x99, 0xce, 0x8b,
		0x46, 0xc7, 0x9a, 0x6b, 0x96, 0x49, 0x2a, 0xef, 0x75, 0xe9, 0x07, 0x96, 0x92,
		0x88, 0xd7, 0x84, 0x12, 0xac, 0x8b, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x02,
		0x7b, 0x57, 0xd5, 0x77, 0xe0, 0x2a, 0x23, 0x75, 0xa5, 0xb8, 0x41, 0xe5, 0x5e,
		0xb2, 0x5b, 0x60, 0xe7, 0x6a, 0xb6, 0xb9, 0x8a, 0xd3, 0x46, 0x29, 0x19, 0x4e,
		0xf7, 0x9a, 0x1b, 0xc2, 0x5a, 0x00, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x02,
		0x81, 0xd2, 0xeb, 0x50, 0x32, 0xa2, 0x65, 0x4c, 0x55, 0x75, 0xd8, 0xfc, 0x5d,
		0x73, 0x49, 0x98, 0x28, 0x8d, 0x5f, 0x43, 0xbb, 0xdd, 0x99, 0x9b, 0x7b, 0x32,
		0xb9, 0x16, 0x29, 0xd3, 0x80, 0x5c, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x02,
		0x28, 0x7e, 0x76, 0x21, 0x8a, 0xc8, 0x8d, 0x06, 0xa5, 0xc4, 0x1b, 0xdb, 0x79,
		0x69, 0x34, 0x11, 0x7b, 0x8a, 0xbf, 0x5a, 0xf4, 0x6f, 0x61, 0x99, 0xe5, 0x0e,
		0x85, 0x12, 0x74, 0x6d, 0x61, 0xa7, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x02,
		0xda, 0xd1, 0x4a, 0xe9, 0x94, 0x97, 0x21, 0x69, 0xa7, 0x18, 0x81, 0xc8, 0x0d,
		0x6d, 0xd0, 0x4f, 0x4b, 0xb4, 0x1e, 0xd1, 0x85, 0x63, 0x12, 0x9c, 0x8e, 0x3f,
		0xff, 0xb7, 0x7f, 0xb7, 0xd9, 0x75, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x02,
		0x4f, 0x9d, 0xf0, 0xba, 0xa3, 0x44, 0x74, 0x2f, 0xf3, 0xac, 0xcf, 0xef, 0x73,
		0xd6, 0xf9, 0xcd, 0xe1, 0x72, 0x04, 0xa6, 0x62, 0x49, 0x10, 0xfd, 0x4f, 0xbb,
		0xa7, 0xd9, 0x14, 0xa1, 0x65, 0xdb, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03,
		0xca, 0x58, 0x70, 0xc5, 0x47, 0x4a, 0x9e, 0x83, 0xec, 0xd2, 0xfa, 0x51, 0x63,
		0xdc, 0xf4, 0x85, 0x5f, 0xcc, 0x1b, 0xe7, 0x83, 0x22, 0x83, 0xd6, 0x76, 0x94,
		0xd3, 0x8a, 0x2e, 0xbb, 0xd9, 0x45, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x02,
		0x5d, 0xbc, 0x52, 0x0e, 0x47, 0xa5, 0x73, 0xd4, 0x2e, 0xd8, 0xf0, 0x6a, 0x34,
		0x7c, 0xde, 0x24, 0x35, 0x81, 0x83, 0x7f, 0xec, 0x92, 0x59, 0x79, 0xbe, 0x5c,
		0xc4, 0xfa, 0x92, 0xab, 0x7a, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00
	};
	static const unsigned char raw_genesis_config_test[] =
	{
		0x24, 0x6a, 0x78, 0x59, 0x00, 0x09, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x03,
		0x16, 0x30, 0xb2, 0xcf, 0x3a, 0xf6, 0x06, 0x04, 0x34, 0xb5, 0xc2, 0xa7, 0x03,
		0xb6, 0xe3, 0xfa, 0x0a, 0x1e, 0xf7, 0xd1, 0xeb, 0x28, 0xc3, 0x97, 0x15, 0x63,
		0xa3, 0x46, 0xcb, 0x02, 0xaa, 0xe2, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x02,
		0x29, 0xf5, 0x29, 0xa6, 0xfe, 0xaa, 0x6c, 0xfd, 0x00, 0x1c, 0xb4, 0x70, 0x6a,
		0x07, 0x03, 0x7d, 0x3d, 0x67, 0xbb, 0x32, 0x4a, 0x3f, 0xa4, 0xca, 0x07, 0xae,
		0x2d, 0xcd, 0x4a, 0x60, 0x1c, 0x5c, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x03,
		0xea, 0x15, 0x96, 0xfa, 0x56, 0x56, 0x9b, 0x6c, 0xb4, 0xe5, 0xf1, 0x5e, 0xfa,
		0xb6, 0x2a, 0x46, 0x60, 0x9e, 0x4e, 0x42, 0x56, 0x86, 0xc2, 0x9e, 0xe4, 0xf0,
		0x47, 0x8c, 0x57, 0x8b, 0x24, 0x84, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x02,
		0xbd, 0xba, 0x62, 0xa6, 0xa6, 0x8a, 0xee, 0x8f, 0x39, 0x57, 0x2b, 0x69, 0xdc,
		0x6c, 0x2a, 0x9f, 0x17, 0xb9, 0x9f, 0x9e, 0x8f, 0x96, 0xe7, 0xd2, 0xee, 0x63,
		0x03, 0xe3, 0xa6, 0x3b, 0xd7, 0xe4, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x02,
		0x03, 0x18, 0x02, 0xc4, 0x9b, 0x86, 0x59, 0x95, 0x27, 0x24, 0x0c, 0x7e, 0xda,
		0xa6, 0xc8, 0xa0, 0xca, 0x0f, 0xf6, 0xda, 0x3b, 0x8a, 0xe8, 0x36, 0x6c, 0x83,
		0x1f, 0xaf, 0x3f, 0xaa, 0xad, 0x38, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x02,
		0xae, 0xb1, 0x58, 0xf5, 0x2f, 0xd1, 0xb4, 0xf5, 0xa4, 0xe9, 0x01, 0x4e, 0xe1,
		0xdf, 0x2b, 0x56, 0x0c, 0xbf, 0xa3, 0x88, 0xd2, 0x35, 0x17, 0x18, 0x07, 0x23,
		0x75, 0xb5, 0xf2, 0xc8, 0xde, 0x70, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x03,
		0x4d, 0x91, 0x84, 0xc2, 0x23, 0xdf, 0xae, 0x8e, 0x40, 0x7e, 0xc2, 0xbc, 0x10,
		0x31, 0x44, 0x0a, 0x4a, 0x74, 0x0b, 0xc1, 0x47, 0x79, 0x1a, 0xc4, 0x24, 0x10,
		0xac, 0x57, 0x53, 0x7e, 0xfd, 0xf5, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03,
		0x38, 0xd7, 0xed, 0xc5, 0xcb, 0x37, 0x77, 0xf0, 0x44, 0xc6, 0x4f, 0x60, 0x19,
		0x09, 0x0d, 0x31, 0x05, 0x30, 0xfe, 0x64, 0xd0, 0x66, 0x9c, 0xb0, 0xe8, 0x6f,
		0x92, 0x4b, 0xeb, 0xda, 0x6f, 0xc4, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x03,
		0x56, 0xfa, 0x18, 0xfd, 0xdd, 0x0e, 0xc2, 0x9e, 0x2c, 0x3b, 0x40, 0x0a, 0xd6,
		0xe7, 0xd2, 0xb9, 0xe7, 0x28, 0x57, 0x3d, 0xfd, 0x37, 0x20, 0x73, 0x7a, 0xd9,
		0x69, 0x62, 0xb8, 0x7c, 0xb8, 0xfc, 0x0a, 0x22, 0x48, 0x37, 0x64, 0x37, 0x70,
		0x56, 0x32, 0x4c, 0x75, 0x45, 0x72, 0x41, 0x72, 0x52, 0x39, 0x68, 0x33, 0x47,
		0x32, 0x7a, 0x63, 0x73, 0x46, 0x73, 0x37, 0x39, 0x4d, 0x64, 0x38, 0x78, 0x61,
		0x74, 0x57, 0x6a, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x48,
		0x37, 0x77, 0x36, 0x50, 0x5a, 0x51, 0x79, 0x55, 0x6f, 0x51, 0x55, 0x57, 0x63,
		0x33, 0x43, 0x58, 0x34, 0x43, 0x4b, 0x4a, 0x6d, 0x76, 0x4b, 0x4d, 0x47, 0x42,
		0x59, 0x54, 0x7a, 0x45, 0x64, 0x4c, 0x4c, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00,
		0x00, 0x00, 0x22, 0x48, 0x46, 0x5a, 0x34, 0x70, 0x65, 0x66, 0x4a, 0x41, 0x66,
		0x56, 0x63, 0x52, 0x77, 0x31, 0x75, 0x56, 0x7a, 0x41, 0x70, 0x4d, 0x7a, 0x50,
		0x62, 0x56, 0x39, 0x35, 0x75, 0x44, 0x61, 0x65, 0x76, 0x33, 0x54, 0x00, 0x10,
		0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x48, 0x46, 0x35, 0x51, 0x73, 0x55,
		0x39, 0x39, 0x50, 0x4a, 0x78, 0x45, 0x70, 0x52, 0x77, 0x50, 0x44, 0x54, 0x73,
		0x69, 0x73, 0x63, 0x65, 0x32, 0x4d, 0x62, 0x61, 0x69, 0x6e, 0x66, 0x4b, 0x65,
		0x78, 0x4b, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x48, 0x43,
		0x4d, 0x72, 0x66, 0x78, 0x68, 0x66, 0x77, 0x38, 0x65, 0x46, 0x4e, 0x47, 0x46,
		0x41, 0x48, 0x50, 0x44, 0x6d, 0x48, 0x37, 0x42, 0x4a, 0x46, 0x72, 0x74, 0x6a,
		0x53, 0x55, 0x43, 0x72, 0x48, 0x4a, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00,
		0x00, 0x22, 0x48, 0x51, 0x65, 0x79, 0x4b, 0x4e, 0x6e, 0x7a, 0x54, 0x4e, 0x7a,
		0x41, 0x47, 0x69, 0x52, 0x51, 0x38, 0x45, 0x6a, 0x43, 0x70, 0x45, 0x62, 0x4b,
		0x74, 0x74, 0x47, 0x73, 0x70, 0x64, 0x54, 0x72, 0x52, 0x35, 0x00, 0x10, 0xa5,
		0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x48, 0x4e, 0x52, 0x31, 0x48, 0x64, 0x31,
		0x38, 0x46, 0x51, 0x50, 0x70, 0x6d, 0x6a, 0x61, 0x53, 0x54, 0x34, 0x61, 0x4d,
		0x36, 0x65, 0x4e, 0x53, 0x75, 0x78, 0x4c, 0x4a, 0x4b, 0x42, 0x35, 0x75, 0x6d,
		0x77, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x48, 0x45, 0x75,
		0x51, 0x4c, 0x36, 0x38, 0x44, 0x58, 0x77, 0x4b, 0x67, 0x38, 0x51, 0x6a, 0x4b,
		0x34, 0x53, 0x45, 0x78, 0x61, 0x31, 0x4a, 0x57, 0x6f, 0x61, 0x44, 0x45, 0x72,
		0x6d, 0x67, 0x32, 0x45, 0x65, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00,
		0x22, 0x48, 0x4d, 0x4d, 0x47, 0x62, 0x7a, 0x75, 0x41, 0x6e, 0x6f, 0x46, 0x58,
		0x4a, 0x43, 0x56, 0x79, 0x46, 0x64, 0x68, 0x77, 0x66, 0x45, 0x67, 0x59, 0x72,
		0x36, 0x54, 0x78, 0x69, 0x6e, 0x77, 0x35, 0x47, 0x72, 0x00, 0x10, 0xa5, 0xd4,
		0xe8, 0x00, 0x00, 0x00, 0x22, 0x48, 0x47, 0x56, 0x41, 0x73, 0x34, 0x57, 0x57,
		0x34, 0x4e, 0x51, 0x62, 0x55, 0x78, 0x36, 0x43, 0x7a, 0x42, 0x4a, 0x77, 0x4e,
		0x6f, 0x55, 0x71, 0x79, 0x41, 0x48, 0x6e, 0x45, 0x74, 0x41, 0x38, 0x41, 0x41,
		0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00
	};
	

GenesisState get_builtin_genesis_block_config(bool is_test_net)
{

	if (is_test_net)
	{
		unsigned total_size = sizeof(raw_genesis_config_test);
		std::unique_ptr<char[]> buffer(new char[total_size]);
		char *ptr = buffer.get();
		memcpy(ptr, (const char*)raw_genesis_config_test, sizeof(raw_genesis_config_test));
		ptr += sizeof(raw_genesis_config_test);
		return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
	}
	else
	{
		unsigned total_size = sizeof(raw_genesis_config0);
		std::unique_ptr<char[]> buffer(new char[total_size]);
		char *ptr = buffer.get();
		memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
		ptr += sizeof(raw_genesis_config0);
		return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
	}

}

fc::sha256 get_builtin_genesis_block_state_hash(bool is_test_net)
{

	if (is_test_net)
	{
		fc::sha256::encoder encoder;
		encoder.write((const char*)raw_genesis_config_test, sizeof(raw_genesis_config_test));
		return encoder.result();
	}
	else
	{
		fc::sha256::encoder encoder;
		encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
		return encoder.result();
	}
	
  
}

} } // end namespace hsrcore::blockchain
