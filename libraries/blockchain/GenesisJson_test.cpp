// This file is generated by hsrcore_json_to_cpp from ${json_file_name}
#ifdef HSR_TEST_NETWORK
#include <blockchain/GenesisJson.hpp>
#include <blockchain/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace hsrcore { namespace blockchain {
static const unsigned char raw_genesis_config0[] =
{
  0xbb, 0x14, 0xe6, 0x59, 0x00, 0x09, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x03, 
  0x03, 0x22, 0x49, 0xa5, 0x75, 0x77, 0xbb, 0x3d, 0x35, 0xd6, 0xce, 0x30, 0x07, 
  0xf4, 0xca, 0x38, 0x7f, 0x85, 0x4e, 0x10, 0xde, 0xf0, 0x95, 0xe6, 0xde, 0x19, 
  0xe5, 0x5f, 0x46, 0xc9, 0xe4, 0x00, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x02, 
  0x39, 0x52, 0xc9, 0xdc, 0x5b, 0x56, 0x11, 0xfd, 0x63, 0x68, 0xd1, 0x27, 0xb2, 
  0xe6, 0x91, 0x70, 0xc4, 0x1c, 0x2b, 0xf1, 0x8e, 0x35, 0xf4, 0x76, 0xdb, 0xbc, 
  0x64, 0xf2, 0x15, 0x7b, 0x30, 0x38, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x02, 
  0x9d, 0xa9, 0xfc, 0xdb, 0xa7, 0x53, 0x2d, 0xd7, 0x53, 0xaf, 0x90, 0x3b, 0xd7, 
  0x1e, 0x2d, 0xe9, 0x70, 0x39, 0x3e, 0x90, 0x62, 0x09, 0x1e, 0x0c, 0xe3, 0x08, 
  0x0e, 0xe1, 0x7c, 0x0f, 0xb9, 0x7f, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x02, 
  0x9f, 0x2a, 0xb0, 0x4d, 0xc3, 0x28, 0x28, 0x9a, 0xfa, 0xa4, 0xe6, 0xa8, 0x63, 
  0x49, 0xa3, 0xa1, 0x8e, 0xb4, 0x08, 0x6d, 0x21, 0xc6, 0x36, 0x3a, 0xba, 0x6a, 
  0x6e, 0x47, 0x47, 0xba, 0xc7, 0xff, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x02, 
  0xcb, 0x8a, 0x68, 0xe3, 0xa7, 0x86, 0x88, 0xd7, 0xe5, 0xce, 0x95, 0x82, 0x4b, 
  0x4d, 0x8a, 0xaa, 0xfa, 0xe9, 0xc0, 0x79, 0xf8, 0xf9, 0xa6, 0x42, 0x3a, 0x6e, 
  0x30, 0xbf, 0xcd, 0xa9, 0x21, 0x60, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x03, 
  0xb7, 0xa4, 0xef, 0x7c, 0x43, 0xbd, 0x74, 0x6b, 0x1a, 0x9a, 0x04, 0xf4, 0x0c, 
  0x7d, 0xdb, 0xd9, 0x2e, 0x6e, 0x4f, 0x7d, 0x63, 0x36, 0x37, 0x74, 0x5b, 0xe4, 
  0x39, 0xcb, 0xf3, 0x81, 0x79, 0x77, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x02, 
  0x6b, 0x2c, 0x0d, 0x17, 0x15, 0x82, 0x08, 0x42, 0x73, 0x93, 0x1c, 0x84, 0x45, 
  0x73, 0x0d, 0xbf, 0x9c, 0xc8, 0x13, 0x9a, 0xe3, 0x57, 0x81, 0xea, 0xd9, 0x1c, 
  0xe2, 0x07, 0x17, 0x7a, 0x0b, 0xa5, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03, 
  0x44, 0x50, 0xcf, 0xff, 0x1f, 0x33, 0x97, 0x06, 0xa4, 0x20, 0xe4, 0x76, 0xfe, 
  0x2e, 0x81, 0x11, 0x22, 0x7b, 0x37, 0x33, 0x00, 0x3d, 0xcb, 0xc4, 0x21, 0x45, 
  0x30, 0x3e, 0x04, 0x0f, 0xf9, 0x06, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x02, 
  0x90, 0x6f, 0x21, 0x55, 0x9a, 0xe8, 0x2b, 0x8a, 0x1d, 0x66, 0xfe, 0xa3, 0xf2, 
  0xd4, 0x04, 0xa1, 0x60, 0x1d, 0xf2, 0xe2, 0xcb, 0xfd, 0xf1, 0x2a, 0x95, 0xe1, 
  0xea, 0xc9, 0x22, 0x80, 0x38, 0x14, 0x01, 0x22, 0x48, 0x38, 0x70, 0x44, 0x4a, 
  0x33, 0x50, 0x4a, 0x74, 0x4a, 0x4a, 0x56, 0x50, 0x39, 0x43, 0x47, 0x4d, 0x37, 
  0x73, 0x64, 0x31, 0x76, 0x75, 0x39, 0x51, 0x44, 0x66, 0x70, 0x50, 0x31, 0x4e, 
  0x38, 0x65, 0x44, 0x00, 0x80, 0x7a, 0x91, 0x18, 0x78, 0xad, 0x03, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}

} } // end namespace hsrcore::blockchain
#endif
